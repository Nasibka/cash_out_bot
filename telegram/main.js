const BotUser = require("../models/botUser");
const EXPENSE = require("../models/expense");
const { ExpensesBot } = require("./index");
const { sendMessage, inlineKeyboard,formatter } = require("../helpers/bot");
const extra = require('telegraf/extra')
const markup = extra.HTML()
const types = require("../constants/types");
const kboard = require("../constants/keyboard");
const {getArrayOfExpenses,sendXSLX} =require("../controllers/mainBotFunctions")

const type_regex = /type\d$/;
const subtype_regex = /[A-Za-z]+_sub\d$/;

// const admin_chat_id = 287016579
const admin_chat_id = 78923920


ExpensesBot.hears('–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã', async(ctx) => {
    // sendXSLX(ctx)
    const admin = await BotUser.findOne({ chat_id: ctx.chat.id });
    if(admin){
        console.log(admin)
        admin.action = 'getExpenses'
        admin.save()
        sendMessage(ctx.chat.id,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–∏–æ–¥ (–ø—Ä–∏–º–µ—Ä: 01.02.2021-24.02.2021 )')
    }
})

ExpensesBot.hears('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é', async(ctx) => {
    const user = await BotUser.findOne({ chat_id: ctx.chat.id });
    user.action = '';
    user.save();
    let array = await getArrayOfExpenses(ctx.chat.id)
    const expense = array[0]
    sendMessage(ctx.chat.id,expense,inlineKeyboard([[{text:">",callback_data:'>'},{text:">>",callback_data:'>>'}]],true))

})

ExpensesBot.hears('–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—É–º–º—É', async(ctx) => {
    const user = await BotUser.findOne({ chat_id: ctx.chat.id });
    
    if(user){
        user.action = 'makeRequest'
        user.save()
        sendMessage(ctx.chat.id,'–ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–æ—Ç —Ä–∞—Å—Ö–æ–¥?',inlineKeyboard(kboard.types_of_exp))
    }

})

ExpensesBot.on('text', async(ctx) => {
    const user = await BotUser.findOne({ chat_id: ctx.chat.id });
    if(user){
        if(user.registered===false){
            //–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
            switch(user.step){
                case 0:
                    user.name = ctx.message.text
                    user.save();
                    sendMessage(ctx.chat.id,ctx.message.text+', –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–≤–æ–µ –∏–º—è?',inlineKeyboard(kboard.yes_no))
                    break;
                case 2:
                    user.position = ctx.message.text
                    user.save();
                    sendMessage(ctx.chat.id,ctx.message.text+', –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å?',inlineKeyboard(kboard.yes_no))
                    break;
            }
        }else{
            switch(user.action){
                case 'waitingRefuse':
                    const waiting_refuse = await EXPENSE.findOne({ state:'active',status:'waiting_refuse' });
                    if(waiting_refuse){
                        console.log(waiting_refuse,77)
                        waiting_refuse.refuse_comment = ctx.message.text
                        waiting_refuse.status = 'refused'
                        waiting_refuse.state = 'not_active'
                        waiting_refuse.save()
                        sendMessage(admin_chat_id,'–Ø –≤—Å–µ –ø–µ—Ä–µ–¥–∞–ª–∞ üëå')
                        sendMessage(waiting_refuse.chat_id,'–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ <b>'+waiting_refuse.name+ '</b> –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –†—É—Å—Ç–∞–º–æ–º. '+
                        '\n<b>ID: </b>'+waiting_refuse.id+
                        '\n<b>–ü—Ä–∏—á–∏–Ω–∞: </b>'+waiting_refuse.refuse_comment,
                        markup)
                    } 
                    user.action = ''
                    user.save()
                    break;
                
                case 'getExpenses':
                    let [first,second] = ctx.message.text.split('-')
                    const gt = first.split('.')[2]+"-"+first.split('.')[1]+"-"+first.split('.')[0]
                    const lt = second.split('.')[2]+"-"+second.split('.')[1]+"-"+second.split('.')[0]
                    sendXSLX(ctx,gt,lt)
                    user.action = ''
                    user.save()
                    break;
                
                case 'makeRequest':
                    const exp = await EXPENSE.find({ chat_id: ctx.chat.id,state:'active',status: 'waiting' }).sort({"createdAt": -1}).limit(1);
                    const expense = exp[0]
                    if(expense){
                        switch(expense.step){
                            case 0:
                                expense.name = ctx.message.text
                                expense.step = 1
                                expense.save();
                                sendMessage(ctx.chat.id,'–ó–∞—á–µ–º –Ω–∞–º —ç—Ç–æ –Ω–∞–¥–æ?')
                                break;
                            case 1:
                                expense.comment = ctx.message.text
                                expense.step = 2
                                expense.save();
                                sendMessage(ctx.chat.id,'–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É. (–ü–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –±–µ–∑ —Ç–≥. –∏–ª–∏ KZT)')
                                break;
                            case 2:
                                expense.price = ctx.message.text
                                expense.step = 3
                                expense.save();
                                let subtypeString
                                if(expense.subtype!=''){
                                    subtypeString = expense.subtype
                                }else{
                                    subtypeString = '–ù–µ—Ç'
                                }
    
                                sendMessage(ctx.chat.id,'–û—Ç–ª–∏—á–Ω–æ, —è —Å–æ–æ–±—â—É –∫–æ–≥–¥–∞ –†—É—Å—Ç–∞–º —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å. –û–∂–∏–¥–∞–π—Ç–µ. \nID –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: '+expense.id)
                                sendMessage(admin_chat_id,' –ü—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å –æ—Ç: <b>'+user.name +'</b>\
                                    \n<b>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞:</b> <i>'+expense.name+'</i>\
                                    \n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <i>'+formatter.format(parseInt(expense.price),100000).replace(/,/g, " ") +' ‚Ç∏</i>\
                                    \n<b>–í–∏–¥ –∑–∞—Ç—Ä–∞—Ç:</b> <i>'+expense.type+' </i>\
                                    \n<b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç:</b> <i>'+subtypeString+' </i>\
                                    \n<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> <i>'+user.position+' </i>\
                                    \n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <i>'+expense.comment+'</i>\
                                    \n<b>ID:</b> <i>'+expense.id+'</i>'
                                , inlineKeyboard(kboard.allowOrNot,true))

                                break;
                            case 3:
                                sendMessage(ctx.chat.id,'–í–∞—à –∑–∞–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ :)')
                                break;
                        }
                    }        
                    break;
            }
        }
    }
    
})

ExpensesBot.on('contact', async(ctx) => {
    const user = await BotUser.findOne({ chat_id: ctx.chat.id });
    if(user){
        if(user.registered===false){
            switch(user.step){
                case 1:
                    user.phone = ctx.message.contact.phone_number
                    user.step = 2
                    user.save();
                    sendMessage(ctx.chat.id,'–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏',
                    {
                        reply_markup: JSON.stringify({
                        remove_keyboard: true
                        })
                    })
                    break;
                }
            }
        }
})

ExpensesBot.action('yes', async(ctx) => {
    const user = await BotUser.findOne({ chat_id: ctx.chat.id });

    if(user && user.registered===false){
        switch(user.step){
            case 0:
                user.step = 1
                user.save();
                ctx.telegram.sendMessage(ctx.chat.id,'–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –í–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.',
                {"reply_markup": JSON.stringify({
                    "keyboard": [
                        [{ text: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact: true }]
                    ],
                    "one_time_keyboard" : true
                })}
                )
                break;
            case 2:
                user.step = 3
                user.registered = true
                user.save();
                if(ctx.chat.id != admin_chat_id){
                    sendMessage(ctx.chat.id,'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
                    {"reply_markup": JSON.stringify({
                        "keyboard": [
                            [{ text: "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—É–º–º—É"}],
                            [{ text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é"}]
                        ],
                        "one_time_keyboard" : true,
                        "resize_keyboard" : true
                    })})  
                }else{
                    sendMessage(ctx.chat.id,'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!')
                }
                break;
        }
    }
})

ExpensesBot.action('no', async(ctx) => {
    const user = await BotUser.findOne({ chat_id: ctx.chat.id });

    if(user && user.registered===false){
        switch(user.step){
            case 0:
                sendMessage(ctx.chat.id,'–ù–∞–ø–∏—à–∏—Ç–µ –µ—â–µ —Ä–∞–∑:')
                break;
            case 1:
                sendMessage(ctx.chat.id,'–ù–∞–ø–∏—à–∏—Ç–µ –µ—â–µ —Ä–∞–∑:')
                break;
            case 2:
                sendMessage(ctx.chat.id,'–ù–∞–ø–∏—à–∏—Ç–µ –µ—â–µ —Ä–∞–∑:')
                break;
        }
    }
})

ExpensesBot.action(type_regex, async(ctx) => {
    const type = kboard.types_of_exp.flat(1).find(({callback_data}) => callback_data === ctx.callbackQuery.data)
    // console.log(ctx.callbackQuery.data,203)
    // console.log(type) 
    const found = types.find(({name})=>name === type.text)
    // console.log(found)
    if(found){

        let exp = await EXPENSE.find({}).sort({"_id": -1}).limit(1);
        if(exp.length!=0){
            // console.log(exp,209)
            const increment = exp[0].id+1
            const newExp = {
                chat_id: ctx.chat.id,
                type: type.text,
                id: increment
            };
            exp = new EXPENSE(newExp);
            exp.save((err, saved) => {
                if(err) console.log(err, ' ,error in telegram/main.js');
                if (saved) {
                    console.log(increment+ ' exp id saved');
                }
            });
        }
        //only if there is no exp and this is the first one
        else{
            const newExp = {
                chat_id: ctx.chat.id,
                type: type.text,
                id:0
            };
            exp = new EXPENSE(newExp);
            exp.save((err, saved) => {
                if(err) console.log(err, ' ,error in telegram/main.js');
                if (saved) {
                    console.log('exp saved');
                }
            });
        }
        
        if(found.sub_types){
            let subtype_buttons = []
            found.sub_types.forEach(el =>{
                subtype_buttons.push([{text:el.name,callback_data:el.id}])
            })
            
            sendMessage(ctx.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:',inlineKeyboard(subtype_buttons));

        }else{
            sendMessage(ctx.chat.id,'–û–∫–µ–π, –∞ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å?');
        }
    }
})

ExpensesBot.action(subtype_regex, async(ctx) => {
    let sub_type
    // types.forEach(el=>{
    //     if(el.sub_types){
    //         console.log(el.sub_types)
    //         sub_type = el.sub_types.find(({id})=>id===ctx.callbackQuery.data)
    //     }
    // })
    for(let type of types){
        if(type.sub_types){
            sub_type = type.sub_types.find(({id})=>id===ctx.callbackQuery.data)
            if(sub_type!==undefined){
                break
            }
        }
    }
    let exp = await EXPENSE.find({}).sort({"_id": -1}).limit(1);
    exp[0].subtype = sub_type.name
    exp[0].save((err, saved) => {
        if(err) console.log(err, ' ,error in telegram/main.js');
        if (saved) {
            console.log(saved,256);
        }
    });
    sendMessage(ctx.chat.id,'–û–∫–µ–π, –∞ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å?')
})

ExpensesBot.action('>', async(ctx) => {
    const page_index = ctx.callbackQuery.message.text.split('\n')[7].split(':')[1].trim()
    let array = await getArrayOfExpenses(ctx.chat.id)
    if(array.length !== parseInt(page_index)+1){
        const expense = array[page_index]
        ExpensesBot.telegram.editMessageText(ctx.chat.id,ctx.callbackQuery.message.message_id,null,expense,inlineKeyboard([[{text:"<<",callback_data:'<'},{text:"<",callback_data:'<'},{text:">",callback_data:'>'},{text:">>",callback_data:'>>'}]],true))
        .then(() => {
            return true;
        })
        .catch(async (err) => {
            console.log(err)
        });
    }else{
        const expense = array[page_index]
        ExpensesBot.telegram.editMessageText(ctx.chat.id,ctx.callbackQuery.message.message_id,null,expense,inlineKeyboard([[{text:"<<",callback_data:'<'},{text:"<",callback_data:'<'}]],true))
        .then(() => {
            return true;
        })
        .catch(async (err) => {
            console.log(err)
        });
    }    
})

ExpensesBot.action('<', async(ctx) => {
    const page_index = ctx.callbackQuery.message.text.split('\n')[7].split(':')[1].trim()
    let array = await getArrayOfExpenses(ctx.chat.id)
    if(page_index != 2){
        const expense = array[page_index-2]
        ExpensesBot.telegram.editMessageText(ctx.chat.id,ctx.callbackQuery.message.message_id,null,expense,inlineKeyboard([[{text:"<<",callback_data:'<<'},{text:"<",callback_data:'<'},{text:">",callback_data:'>'},{text:">>",callback_data:'>>'}]],true))
        .then(() => {
            return true;
        })
        .catch(async (err) => {
            console.log(err)
        });
    }else{
        const expense = array[0]
        ExpensesBot.telegram.editMessageText(ctx.chat.id,ctx.callbackQuery.message.message_id,null,expense,inlineKeyboard([[{text:">",callback_data:'>'},{text:">>",callback_data:'>>'}]],true))
        .then(() => {
            return true;
        })
        .catch(async (err) => {
            console.log(err)
        });
    }    
})

ExpensesBot.action('>>', async(ctx) => {
    let array = await getArrayOfExpenses(ctx.chat.id)
    const expense = array[array.length-1]
    ExpensesBot.telegram.editMessageText(ctx.chat.id,ctx.callbackQuery.message.message_id,null,expense,inlineKeyboard([[{text:"<<",callback_data:'<<'},{text:"<",callback_data:'<'}]],true))
    .then(() => {
        return true;
    })
    .catch(async (err) => {
        console.log(err)
    });
})

ExpensesBot.action('<<', async(ctx) => {
    let array = await getArrayOfExpenses(ctx.chat.id)
    const expense = array[0]
    ExpensesBot.telegram.editMessageText(ctx.chat.id,ctx.callbackQuery.message.message_id,null,expense,inlineKeyboard([[{text:">>",callback_data:'>>'},{text:">",callback_data:'>'}]],true))
    .then(() => {
        return true;
    })
    .catch(async (err) => {
        console.log(err)
    });
})
